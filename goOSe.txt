# KNOWN BUGS:

# Text to code converter
def @a 1
def @b 2
def @c 3
def @d 4
def @e 5
def @f 6
def @g 7
def @h 8
def @i 9
def @j A
def @k B
def @l C
def @m D
def @n E
def @o F
def @p 10
def @q 11
def @r 12
def @s 13
def @t 14
def @u 15
def @v 16
def @w 17
def @x 18
def @y 19
def @z 1A
def @_ 20
def @0 30
def @1 31
def @2 32
def @3 33
def @4 34
def @5 35
def @6 36
def @7 37
def @8 38
def @9 39
def @: 3A
def @as 2A
def @us 52
def @bl 60

# Location of next character to draw
def cursor1 00
def cursor2 01

def CURSOR1_BASE 00
def CURSOR2_BASE 20

set cursor1 CURSOR1_BASE
set cursor2 CURSOR2_BASE

# Location of next text to be drawn to the screen
def text1 02
def text2 03

def keybuf1 04
def keybuf2 05

def KEYBUFBASE1 E0

def inbuf1 06
def inbuf2 07

def commandstart1 08
def commandstart2 09

def instr1 0A
def instr2 0B

def instr_base1 C0
def instr_base2 0D

def jump1 0C
def jump2 0D

set jump1 34
set jump2 01

set instr1 instr_base1
set instr2 instr_base2

def colorLoc1 *4401
def colorLoc2 *4402

str s_title "      goose cpu emulator "
str s_cmd "cmd>"
str s_exit "exit"
str s_commandnotrecognized "command not recognized."
str s_cls "cls"
str s_read "read"
str s_os_read_error1 "error: 1st arg (address) must be 2 bytes"
str s_os_read_error2 "error: 2nd arg (blocks) must be 1 byte"
str s_write "write"
str s_os_write_error2 "error: 2nd arg (data) must be 1 byte"
str s_done "done."

str s_os_run "run"
str s_os_run_error1 "error: must use only 1 arg"

# Make Goose character
mov ar C
mov *1330 ar
mov ar E
mov *1331 ar
mov ar 8
mov *1332 ar
mov ar 78
mov *1333 ar
mov ar FC
mov *1334 ar
mov ar 7C
mov *1335 ar
mov ar 38
mov *1336 ar
mov ar 4C
mov *1337 ar

mov ar s_title1
mov $text1 ar
mov ar s_title2
mov $text2 ar
call printstr
mov ar 66
call printchar

call newline

mov ar s_cmd1
mov $text1 ar
mov ar s_cmd2
mov $text2 ar
call printstr
call printus

mov ar $keybuf1
mov $inbuf1 ar
mov ar $keybuf2
mov $inbuf2 ar

# Set commandstart to initial correct value
mov ar $keybuf1
inc ar
and 1F
or KEYBUFBASE1
mov $commandstart1 ar
mov ar $keybuf2
mov $commandstart2 ar
clc

loc mainloop
call keyprocess
jmp mainloop

halt

####### Run function #######
# Runs code starting at the given address
# Syntax: RUN [address]
func os_run


mov ar @_
call readinput
#io ar
sub 4
# Is the first argument 2 bytes?
jz os_run_step1
mov ar s_os_read_error11
mov $text1 ar
mov ar s_os_read_error12
mov $text2 ar
call printstr
call newline
call newline
ret

loc os_run_step1
mov br 0
ldz $instr1
push ar
mov br 1
ldz $instr1
call chartohex
mov $text2 ar

mov br 2
ldz $instr1
push ar
mov br 3
ldz $instr1
call chartohex
mov $text1 ar

mov ar $instr1
add 4
mov $instr1 ar
mov br 0
ldz $instr1
#io ar
clc
add 0
jnz os_run_error
# No second argument given, call given address
callz $text1

mov ar s_done1
mov $text1 ar
mov ar s_done2
mov $text2 ar
call printstr

call newline
call newline
ret

# More than one argument given, print error
loc os_run_error
mov ar s_os_run_error11
mov $text1 ar
mov ar s_os_read_error12
mov $text2 ar
call printstr
call newline
call newline
ret





####### Write to memory function #######
# Writes one memory byte at a given location
# Syntax: WRITE [address] [data]
func os_write

mov ar @_
call readinput
#io ar
sub 4
# Is the first argument 2 bytes?
jz os_write_step1
mov ar s_os_read_error11
mov $text1 ar
mov ar s_os_read_error12
mov $text2 ar
call printstr
call newline
call newline
ret

loc os_write_step1
mov br 0
ldz $instr1
push ar
mov br 1
ldz $instr1
call chartohex
mov $text2 ar

mov br 2
ldz $instr1
push ar
mov br 3
ldz $instr1
call chartohex
mov $text1 ar

mov ar $instr1
add 5
mov $instr1 ar
mov ar @_
call readinput

sub 1
# Only one nibble given?
jnz os_write_step2_notone
# Push char 0 for high nibble
push 30
mov br 0
ldz $instr1
call chartohex
#io ar
jmp os_write_end

loc os_write_step2_notone
# Two nibbles given?
sub 1
jnz os_write_step2_err
mov br 0
ldz $instr1
push ar
mov br 1
ldz $instr1
call chartohex
#io ar
jmp os_write_end

loc os_write_step2_err
mov ar s_os_write_error21
mov $text1 ar
mov ar s_os_write_error22
mov $text2 ar
call printstr
call newline
call newline
ret

loc os_write_end

mov br 0
stz $text1

mov ar s_done1
mov $text1 ar
mov ar s_done2
mov $text2 ar
call printstr

call newline
call newline

ret



####### Read from memory function #######
# Prints memory bytes to the screen
# Syntax: READ [start] [#8 byte blocks]
func os_read

mov ar @_
call readinput
#io ar
sub 4
# Is the first argument 2 bytes?
jz os_read_step1
mov ar s_os_read_error11
mov $text1 ar
mov ar s_os_read_error12
mov $text2 ar
call printstr
call newline
call newline
ret

loc os_read_step1
mov br 0
ldz $instr1
push ar
mov br 1
ldz $instr1
call chartohex
mov $text2 ar

mov br 2
ldz $instr1
push ar
mov br 3
ldz $instr1
call chartohex
mov $text1 ar

mov ar $instr1
add 4
mov $instr1 ar
mov br 0
ldz $instr1
#io ar
clc
add 0
jnz os_read_nondefault
# No second argument given, print default 1 block
mov ar 1
jmp os_read_end

loc os_read_nondefault

mov ar $instr1
inc ar
mov $instr1 ar
mov ar @_
call readinput

sub 1
# Only one nibble given?
jnz os_read_step2_notone
# Push char 0 for high nibble
push 30
mov br 0
ldz $instr1
call chartohex
#io ar
jmp os_read_end

loc os_read_step2_notone
# Two nibbles given?
sub 1
jnz os_read_step2_err
# Push char 0 for high nibble
mov br 0
ldz $instr1
push ar
mov br 1
ldz $instr1
call chartohex
#io ar
jmp os_read_end

loc os_read_step2_err
mov ar s_os_read_error21
mov $text1 ar
mov ar s_os_read_error22
mov $text2 ar
call printstr
call newline
call newline
ret

loc os_read_end
call dispmem
call newline
ret



####### Read Input function #######
# Arguments:
# Ar: Char code to stop on
# Returns:
# Ar: Number of characters read before stop char
# Local vars:
# Peek 1: Stop char code
# Peek 2: Number of chars read
func readinput
push ar

mov br 0
swp
push ar
swp

loc readinput_start
ldz $instr1
#io ar
# Get input char in Ar
add 0
jnz readinput_nonzero
#io br
swp
ret

loc readinput_nonzero
sub 1f
jnz readinput_nonbs
swp
ret

loc readinput_nonbs
clc
add 1f
swp
# Save number of cycles
poke 2
# Get stop code
peek 1
sub br
jnz readinput_nonstop
# Stop code reached
peek 2
ret

loc readinput_nonstop
peek 2
inc ar
poke 2
swp
jmp readinput_start

ret



####### CLear Screen function ######
# Clears the screen and redraws UI
func os_cls
# Save Ar and Br
#push ar
#swp
#push ar

mov ar CURSOR1_BASE
mov $cursor1 ar
mov ar CURSOR2_BASE
mov $cursor2 ar

mov br 0

# Blank the screen
call blank_screen

# Redraw UI
mov ar CURSOR1_BASE
mov $cursor1 ar
mov ar CURSOR2_BASE
mov $cursor2 ar

mov ar s_title1
mov $text1 ar
mov ar s_title2
mov $text2 ar
call printstr
mov ar 66
call printchar

call newline

ret

####### Blank screen function #######
# Blanks out the screen
func blank_screen
mov br 0

loc blank_screen_start
# Blank the screen
mov ar 00
stz $cursor1
inc br
jnz blank_screen_start
mov ar $cursor2
inc ar
mov $cursor2 ar
sub CURSOR2_BASE
sub 4
#io ar
jnz blank_screen_start
ret


####### STREQUALS function ########
# Returns 1 if strings are equal
# Ar: Zero-page String 1
# $text: Zero-page String 2
# Br: Char code to stop on (00 for default)
#
# peek 1: Zero-page string 1
# peek 2: char code to stop on
# peek 3: local var to hold returned char
# peek 4: local var to hold offset
func strequals

push ar
swp
push ar
push ar
mov ar 0
push ar
swp
mov br 0

loc strequals_start
ldz ar
poke 3
ldz $text1
swp
peek 3
sub br
# Are the strings different?
jnz strequals_end
# Are we at the end?
clc
add br
jnz strequals_nonzero
# Both chars end in 00, return 1
mov ar 1
ret
loc strequals_nonzero
peek 2
sub br
jnz strequals_nonstop
# Both chars end in stop char, return 1
clc
mov ar 1
ret
loc strequals_nonstop
# Not 00 or stop char, continue
peek 4
inc ar
poke 4
swp
peek 1
jmp strequals_start

loc strequals_end
# Strings are different. Is the difference only in the ending char?
clc
add br
add 0
jz strequals_end_onezero
# Is the other one zero?
clc
swp
add 0
jz strequals_end_onezero
# Strings are different and neither ending is 00 so they really are different, return 0
mov ar 0
ret
loc strequals_end_onezero
# Is the other char the ending char?
peek 2
swp
sub br
jz strequals_end_match
# One char is 00, but the other isn't stop char, return 0
mov ar 0
ret

loc strequals_end_match
# One char is 00, one is stop char, return 1
mov ar 1
ret


####### PARSEINPUT function #######
func parseinput

# Move command from ring buffer to instr
mov br 0
mov ar instr_base1
mov $instr1 ar

loc parseinput_start
ldz $commandstart1
stz $instr1
add 0
jz parseinput_getin
mov ar $commandstart1
inc ar
and 1F
or KEYBUFBASE1
mov $commandstart1 ar
mov ar $instr1
inc ar
mov $instr1 ar
jmp parseinput_start

loc parseinput_getin
mov ar instr_base1
mov $instr1 ar

# Was exit typed?
mov ar s_exit1
mov $text1 ar
mov ar s_exit2
mov $text2 ar
mov ar instr1
mov br @_
call strequals
add 0
jnz parseinput_exit

# Was cls typed?
mov ar s_cls1
mov $text1 ar
mov ar s_cls2
mov $text2 ar
mov ar instr1
mov br @_
call strequals
add 0
jnz parseinput_cls

# Was read typed?
mov ar s_read1
mov $text1 ar
mov ar s_read2
mov $text2 ar
mov ar instr1
mov br @_
call strequals
add 0
jnz parseinput_read

# Was write typed?
mov ar s_write1
mov $text1 ar
mov ar s_write2
mov $text2 ar
mov ar instr1
mov br @_
call strequals
add 0
jnz parseinput_write

# Was run typed?
mov ar s_os_run1
mov $text1 ar
mov ar s_os_run2
mov $text2 ar
mov ar instr1
mov br @_
call strequals
add 0
jnz parseinput_run

# No recognized command
mov ar s_commandnotrecognized1
mov $text1 ar
mov ar s_commandnotrecognized2
mov $text2 ar
call printstr
call newline
call newline

jmp parseinput_end

# "EXIT" typed
loc parseinput_exit
halt

# "CLS" typed
loc parseinput_cls
call os_cls
jmp parseinput_end

# "READ" typed
loc parseinput_read
mov ar $instr1
add 5
mov $instr1 ar
call os_read
jmp parseinput_end

# "WRITE" typed
loc parseinput_write
mov ar $instr1
add 6
mov $instr1 ar
call os_write
jmp parseinput_end

# "RUN" typed
loc parseinput_run
mov ar $instr1
add 4
mov $instr1 ar
call os_run
jmp parseinput_end

loc parseinput_end
mov ar $inbuf1
inc ar
and 1F
or KEYBUFBASE1
mov $commandstart1 ar
mov ar $inbuf2
mov $commandstart2 ar

mov ar instr_base1
mov $instr1 ar
#io ar

ret


####### KEYPROCESS function ########
func keyprocess

mov ar $keybuf1
mov br $inbuf1
clc
sub br
jnz keyprocess_getkey
# Key buffer hasn't moved, return
ret
loc keyprocess_getkey
# Input buffer is a 32-bit ring buffer
mov ar $inbuf1
clc
inc ar
and 1F
or KEYBUFBASE1
mov $inbuf1 ar
mov br 0
ldz $inbuf1
add 0
jnz keyprocess_bs

mov ar @_
call printchar
call newline
call parseinput

mov ar s_cmd1
mov $text1 ar
mov ar s_cmd2
mov $text2 ar
call printstr
call printus
ret

loc keyprocess_bs
sub 1F
jnz keyprocess_char

clc
mov ar @_
call printchar
mov ar $cursor1
sub 2
mov $cursor1 ar
mov ar $cursor2
add 0
mov $cursor2 ar
mov ar @_
call printchar
mov ar $cursor1
dec ar
mov $cursor1 ar
mov ar $cursor2
add 0
mov $cursor2 ar
mov ar $inbuf1
sub 2
and 1F
or KEYBUFBASE1
mov $inbuf1 ar
call printus
ret

loc keyprocess_char
clc
add 1F
call printchar
call printus

ret


####### DISPMEM function #######
# Display memory with locations printed
# Arguments:
# Ar: Number of 8-byte blocks to print
# $text: Starting location to print from
func dispmem
push ar

loc dispmem_start
dec ar
jm dispmem_end
poke 1

mov ar $text2
call printhex
mov ar $text1
call printhex
mov ar @:
call printchar
mov ar 8
mov br @_
call printmem
call newline
mov ar $text1
add 8
mov $text1 ar
mov ar $text2
add 0
mov $text2 ar
peek 1
jmp dispmem_start

loc dispmem_end
ret


####### NEWLINE function #######
# Moves cursor to beginning of next line
loc newline
clc
mov ar $cursor1
not ar
mov br 1F
and br
mov br $cursor1
add br
add 1
mov $cursor1 ar
mov ar $cursor2
add 0
mov $cursor2 ar
ret


####### CHARTOHEX function #######
# Converts two chars to a single hex byte
# Arguments:
# Push 1 (peek FC): high-nibble char
# Ar: low-nibble char
# Returns:
# Ar: hex byte
func chartohex

# Is low nibble hex letter?
sub 7
jm chartohex_low_hexletter
# Not hex letter, so number. Convert char num to hex
sub 29
jmp chartohex_high_start

loc chartohex_low_hexletter
# Convert char hex letter to hex
clc
add 10

loc chartohex_high_start
# Move low nibble to Br
swp
# Get high nibble
peek FC
#io ar
# Do same hex conversion on high nibble
# Is high nibble hex letter?
sub 7
jm chartohex_high_hexletter
# Not hex letter, so number. Convert char num to hex
sub 29
#io ar
jmp chartohex_end

loc chartohex_high_hexletter
# Convert char hex letter to hex
clc
add 10

loc chartohex_end
# Shift high nibble up
shl
shl
shl
shl
# OR with low nibble and return
or br

ret


####### PRINTHEX function #######
# Prints a hex byte passed in the A reg
func printhex
push ar

mov br F0
and br
shr
shr
shr
shr
clc
mov br A
sub br
jm printhex_num1

# Print letter
add 1
jmp printhex_end1

loc printhex_num1
# Print number
clc
add 3A

loc printhex_end1
mov br 0
stz $cursor1

# Set character color to text default
mov ar $cursor2
add 20
mov $cursor2 ar
mov ar colorLoc2
stz $cursor1
mov ar $cursor2
sub 20
mov $cursor2 ar

peek 1

clc
mov br 0F
and br

mov br A
sub br
jm printhex_num2

# Print letter
add 1
jmp printhex_end2

loc printhex_num2
# Print number
clc
add 3A

loc printhex_end2
mov br 1
stz $cursor1

# Set character color to text default
mov ar $cursor2
add 20
mov $cursor2 ar
mov ar colorLoc2
stz $cursor1
mov ar $cursor2
sub 20
mov $cursor2 ar

mov ar $cursor1
add 2
mov $cursor1 ar
mov ar $cursor2
add 0
mov $cursor2 ar

ret


####### PRINTMEM function #######
# Prints Ar hex bytes pointed to by $text1 and $text2
# Max number of bytes is 255
# Arguments:
# $text: Location of memory to print
# Ar: Number of bytes to print
# Br: Character to print between bytes, 00 for no space
#
# BP1: Number of bytes to print
# BP2: Character to print between bytes, 00 for no space
# BP3: Number of bytes that have been printed

func printmem
push ar
swp
push ar
push ar
swp
mov br 0

loc printmem_start
clc
sub br
jz printmem_end
ldz $text1
swp
poke 3
swp
call printhex

peek 2
add 0
jz printmem_space
call printchar

loc printmem_space
peek 3
swp
inc br
peek 1
jmp printmem_start

loc printmem_end
ret


####### PRINTCHAR function #######
# Prints a single character to the string passed in A reg
func printchar

# Print character to screen
clc
mov br 0
stz $cursor1

# Set character color to text default
mov ar $cursor2
add 20
mov $cursor2 ar
mov ar colorLoc2
stz $cursor1
mov ar $cursor2
sub 20
mov $cursor2 ar

mov ar $cursor1
inc ar
mov $cursor1 ar
mov ar $cursor2
add 0
mov $cursor2 ar
ret


####### PRINTUS function #######
# Prints the underscore showing where the next char will be written
func printus
mov ar @us
call printchar
mov ar $cursor1
dec ar
mov $cursor1 ar
mov ar $cursor2
add 0
mov $cursor2 ar
clc
ret


####### PRINTSTR function #######
# Prints the string at $text1 and $text2 to the screen
# Final character of string must be 00
# Max string length is 255 characters
func printstr
clc
mov br 0

loc startprint
ldz $text1
add 0
jz endprint
stz $cursor1

# Set character color to text default
mov ar $cursor2
add 20
mov $cursor2 ar
mov ar colorLoc2
stz $cursor1
mov ar $cursor2
sub 20
mov $cursor2 ar

inc br
jmp startprint

loc endprint
mov ar $cursor1
add br
mov $cursor1 ar
mov ar $cursor2
add 0
mov $cursor2 ar
ret